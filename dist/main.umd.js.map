{"version":3,"file":"main.umd.js","sources":["../src/index.js"],"sourcesContent":["'use strict';\n\nconst lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nlet reverseLookup = new Uint8Array(256);\n\nfor (let i = 0; i < lookup.length; i++) {\n  reverseLookup[lookup.charCodeAt(i)] = i;\n}\n\nconst base64urlRegex = /^([0-9a-zA-Z\\-_]{4})*([0-9a-zA-Z\\-_]{3}=?)?$/;\n\n/**\n * Decode a base64url string to an ArrayBuffer.\n * @param {string} base64url\n * @returns {ArrayBuffer}\n */\nexport function decode(base64url) {\n  if (!base64urlRegex.test(base64url)) {\n    throw new Error('Invalid base64url string');\n  }\n\n  const base64urlLength = base64url.length;\n\n  const placeHolderLength = base64url.charAt(base64urlLength - 2) === '=' ? 2 : base64url.charAt(base64urlLength - 1) === '=' ? 1 : 0;\n  const bufferLength = (base64urlLength * 3) / 4 - placeHolderLength;\n\n  let arrayBuffer = new ArrayBuffer(bufferLength);\n  let uint8Array = new Uint8Array(arrayBuffer);\n\n  let j = 0;\n  for (let i = 0; i < base64urlLength; i += 4) {\n    let tmp0 = reverseLookup[base64url.charCodeAt(i)];\n    let tmp1 = reverseLookup[base64url.charCodeAt(i + 1)];\n    let tmp2 = reverseLookup[base64url.charCodeAt(i + 2)];\n    let tmp3 = reverseLookup[base64url.charCodeAt(i + 3)];\n\n    uint8Array[j++] = (tmp0 << 2) | (tmp1 >> 4);\n    uint8Array[j++] = ((tmp1 & 15) << 4) | (tmp2 >> 2);\n    uint8Array[j++] = ((tmp2 & 3) << 6) | (tmp3 & 63);\n  }\n\n  return arrayBuffer;\n}\n\n/**\n * Encode an ArrayBuffer to a base64url string.\n * @param {ArrayBuffer} arrayBuffer\n * @returns {string}\n */\nexport function encode(arrayBuffer) {\n  let uint8Array = new Uint8Array(arrayBuffer);\n  const length = uint8Array.length;\n  let base64url = '';\n\n  for (let i = 0; i < length; i += 3) {\n    base64url += lookup[uint8Array[i] >> 2];\n    base64url += lookup[((uint8Array[i] & 3) << 4) | (uint8Array[i + 1] >> 4)];\n    base64url += lookup[((uint8Array[i + 1] & 15) << 2) | (uint8Array[i + 2] >> 6)];\n    base64url += lookup[uint8Array[i + 2] & 63];\n  }\n\n  switch (length % 3) {\n    case 1:\n      base64url = base64url.substring(0, base64url.length - 2);\n      break;\n    case 2:\n      base64url = base64url.substring(0, base64url.length - 1);\n      break;\n  }\n  return base64url;\n}\n"],"names":["lookup","reverseLookup","Uint8Array","i","charCodeAt","base64urlRegex","base64url","test","Error","base64urlLength","length","placeHolderLength","charAt","arrayBuffer","ArrayBuffer","uint8Array","j","tmp0","tmp1","tmp2","tmp3","substring"],"mappings":"iPAEA,MAAMA,EAAS,mEACf,IAAIC,EAAgB,IAAIC,WAAW,KAEnC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,GAAeG,IACjCF,EAAcD,EAAOI,WAAWD,IAAMA,EAGxC,MAAME,EAAiB,wDAOhB,SAAgBC,GACrB,IAAKD,EAAeE,KAAKD,GACvB,MAAM,IAAIE,MAAM,4BAGlB,MAAMC,EAAkBH,EAAUI,OAE5BC,EAA8D,MAA1CL,EAAUM,OAAOH,EAAkB,GAAa,EAA8C,MAA1CH,EAAUM,OAAOH,EAAkB,GAAa,EAAI,EAGlI,IAAII,EAAc,IAAIC,YAFkB,EAAlBL,EAAuB,EAAIE,GAG7CI,EAAa,IAAIb,WAAWW,GAE5BG,EAAI,EACR,IAAK,IAAIb,EAAI,EAAGA,EAAIM,EAAiBN,GAAK,EAAG,CAC3C,IAAIc,EAAOhB,EAAcK,EAAUF,WAAWD,IAC1Ce,EAAOjB,EAAcK,EAAUF,WAAWD,EAAI,IAC9CgB,EAAOlB,EAAcK,EAAUF,WAAWD,EAAI,IAC9CiB,EAAOnB,EAAcK,EAAUF,WAAWD,EAAI,IAElDY,EAAWC,KAAQC,GAAQ,EAAMC,GAAQ,EACzCH,EAAWC,MAAgB,GAAPE,IAAc,EAAMC,GAAQ,EAChDJ,EAAWC,MAAgB,EAAPG,IAAa,EAAa,GAAPC,CACxC,CAED,OAAOP,CACT,WAOO,SAAgBA,GACrB,IAAIE,EAAa,IAAIb,WAAWW,GAChC,MAAMH,EAASK,EAAWL,OAC1B,IAAIJ,EAAY,GAEhB,IAAK,IAAIH,EAAI,EAAGA,EAAIO,EAAQP,GAAK,EAC/BG,GAAaN,EAAOe,EAAWZ,IAAM,GACrCG,GAAaN,GAAyB,EAAhBe,EAAWZ,KAAW,EAAMY,EAAWZ,EAAI,IAAM,GACvEG,GAAaN,GAA6B,GAApBe,EAAWZ,EAAI,KAAY,EAAMY,EAAWZ,EAAI,IAAM,GAC5EG,GAAaN,EAA2B,GAApBe,EAAWZ,EAAI,IAGrC,OAAQO,EAAS,GACf,KAAK,EACHJ,EAAYA,EAAUe,UAAU,EAAGf,EAAUI,OAAS,GACtD,MACF,KAAK,EACHJ,EAAYA,EAAUe,UAAU,EAAGf,EAAUI,OAAS,GAG1D,OAAOJ,CACT"}